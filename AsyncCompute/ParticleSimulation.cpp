#include "ParticleSimulation.hpp"

/// <summary>
/// Triangle vertices are generated by geometry shader.
/// Two buffers full of particle data are used, and
/// compute thread alternates writing to each of them.
/// Render thread uses the other buffer
/// (which is not currently used by the compute shader)
/// </summary>

//---------------------------------------------------------------------------//
/// Local functions:
//---------------------------------------------------------------------------//
static void _allocSimData() {
  g_ParticleSim =
      reinterpret_cast<ParticleSimData*>(::malloc(sizeof(*g_ParticleSim)));
  ::memset(g_ParticleSim, 0, sizeof(*g_ParticleSim));
  g_ParticleSim->m_ParticleCount = 10000;
}
//---------------------------------------------------------------------------//
static void _deallocSimData() { ::free(g_ParticleSim); }
//---------------------------------------------------------------------------//
static void _loadPipeline() {...}
static void _loadAssets() {...}
static void _restoreD3DResources();
static void _releaseD3DResources();
static void _waitForGpu();
static void _createAsyncContexts() {...}
static void _createVertexBuffer();
static float _RandomPercent();
static void _loadParticles(
    _Out_writes_(p_ParticleCount) ParticleSimData::ParticleMotion* p_Particles,
    const XMFLOAT3& p_Center,
    const XMFLOAT4& p_Velocity,
    float p_Spread,
    UINT p_ParticleCount);
static void _createParticleBuffers();
static void _populateCommandList();

static DWORD
_asyncComputeThreadProc(ParticleSimData* p_Context, int threadIndex) {}
static DWORD WINAPI ThreadProc(ParticleSimData::ThreadData* p_Data) {
  return _asyncComputeThreadProc(p_Data->m_Context, p_Data->m_ThreadIndex);
}
static void _simulate(UINT threadIndex);

static void _waitForRenderContext();
static void _moveToNextFrame();
//---------------------------------------------------------------------------//
// Core functions:
//---------------------------------------------------------------------------//
void onInit(void) {
  _allocSimData();
  DEBUG_BREAK(g_DemoInfo->m_IsInitialized);

  UINT width = g_DemoInfo->m_Width;
  UINT height = g_DemoInfo->m_Height;
  g_ParticleSim->m_FrameIndex = 0;
  g_ParticleSim->m_Viewport = CD3DX12_VIEWPORT(
      0.0f, 0.0f, static_cast<float>(width), static_cast<float>(height));
  g_ParticleSim->m_ScissorRect =
      CD3DX12_RECT(0, 0, static_cast<LONG>(width), static_cast<LONG>(height));
  g_ParticleSim->m_RtvDescriptorSize = 0;
  g_ParticleSim->m_SrvUavDescriptorSize = 0;
  g_ParticleSim->m_CbufferGSData = nullptr;
  g_ParticleSim->m_RenderContextFenceValue = 0;
  g_ParticleSim->m_Terminating = 0;
  setArrayToZero(g_ParticleSim->m_SrvIndex);
  setArrayToZero(g_ParticleSim->m_FrameFenceValues);

  for (int i = 0; i < THREAD_COUNT; ++i) {
    g_ParticleSim->m_RenderContextFenceValues[i] = 0;
    g_ParticleSim->m_ThreadFenceValues[i] = 0;
  }

  float sqRootNumAsyncContexts = sqrt(static_cast<float>(THREAD_COUNT));
  g_ParticleSim->m_HeightInstances =
      static_cast<UINT>(ceil(sqRootNumAsyncContexts));
  g_ParticleSim->m_WidthInstances =
      static_cast<UINT>(ceil(sqRootNumAsyncContexts));

  if (g_ParticleSim->m_WidthInstances *
          (g_ParticleSim->m_HeightInstances - 1) >=
      THREAD_COUNT) {
    g_ParticleSim->m_HeightInstances--;
  }

  D3D_EXEC_CHECKED(DXGIDeclareAdapterRemovalSupport());

  cameraInit(&g_ParticleSim->m_Camera, {0.0f, 0.0f, 1500.0f});
  g_ParticleSim->m_Camera.m_MoveSpeed = 250.0f;

  _loadPipeline();
  _loadAssets();
  _createAsyncContexts();
}
//---------------------------------------------------------------------------//
void onDestroy(void) { _deallocSimData(); }
//---------------------------------------------------------------------------//
void onUpdate(void) {}
//---------------------------------------------------------------------------//
void onRender(void) {}
//---------------------------------------------------------------------------//
void onKeyDown(UINT8) {}
//---------------------------------------------------------------------------//
void onKeyUp(UINT8) {}
//---------------------------------------------------------------------------//
